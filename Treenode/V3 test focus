Pour que le test de focus fonctionne correctement avec Angular et Jest, nous devons nous assurer que nous attendons bien les changements de détection, car les mises à jour de l'interface utilisateur peuvent ne pas se produire immédiatement. Nous pouvons utiliser des méthodes d'attente comme `tick` et `fakeAsync` de `@angular/core/testing`.

### Mise à jour des tests unitaires pour gérer le focus

Voici comment vous pouvez mettre à jour les tests pour vous assurer que le focus est correctement testé :

1. **Importer les fonctions nécessaires de `@angular/core/testing`** :
   ```ts
   import { fakeAsync, tick } from '@angular/core/testing';
   ```

2. **Utiliser `fakeAsync` et `tick` pour les tests de focus** :
   ```ts
   import { Spectator, createComponentFactory } from '@ngneat/spectator';
   import { MyComponent } from './my-component.component';

   describe('MyComponent', () => {
     let spectator: Spectator<MyComponent>;
     const createComponent = createComponentFactory(MyComponent);

     beforeEach(() => {
       spectator = createComponent();
     });

     it('should focus on the name input when the page loads', fakeAsync(() => {
       spectator.detectChanges();
       tick();
       const nameInput = spectator.query<HTMLInputElement>('input[type="text"]');
       expect(document.activeElement).toBe(nameInput);
     }));

     it('should focus on the name input when a new row is added', fakeAsync(() => {
       const addButton = spectator.query('button.btn-primary');
       spectator.click(addButton);
       spectator.detectChanges();
       tick();
       const nameInput = spectator.query<HTMLInputElement>('input[type="text"]');
       expect(document.activeElement).toBe(nameInput);
     }));
   });
   ```

### Exemple complet de tests unitaires mis à jour

Voici le code complet des tests mis à jour avec la gestion de `fakeAsync` et `tick` :

```ts
import { Spectator, createComponentFactory } from '@ngneat/spectator';
import { fakeAsync, tick } from '@angular/core/testing';
import { MyComponent } from './my-component.component';

describe('MyComponent', () => {
  let spectator: Spectator<MyComponent>;
  const createComponent = createComponentFactory(MyComponent);

  beforeEach(() => {
    spectator = createComponent();
  });

  it('should focus on the name input when the page loads', fakeAsync(() => {
    spectator.detectChanges();
    tick();
    const nameInput = spectator.query<HTMLInputElement>('input[type="text"]');
    expect(document.activeElement).toBe(nameInput);
  }));

  it('should focus on the name input when a new row is added', fakeAsync(() => {
    const addButton = spectator.query('button.btn-primary');
    spectator.click(addButton);
    spectator.detectChanges();
    tick();
    const nameInput = spectator.query<HTMLInputElement>('input[type="text"]');
    expect(document.activeElement).toBe(nameInput);
  }));

  it('should add a new row at the end when no row is selected', () => {
    spectator.component.selectedNode = null;
    const initialLength = spectator.component.dataSource.length;
    const addButton = spectator.query('button.btn-primary');
    spectator.click(addButton);

    expect(spectator.component.dataSource.length).toBe(initialLength + 1);
    expect(spectator.component.dataSource[initialLength].name).toBe('');
  });

  it('should select the new row added', () => {
    const addButton = spectator.query('button.btn-primary');
    spectator.click(addButton);

    const newRow = spectator.component.dataSource[spectator.component.dataSource.length - 1];
    expect(newRow.isSelected).toBe(true);
    expect(spectator.component.selectedNode).toBe(newRow);
  });

  it('should add a child to the selected row', () => {
    spectator.component.dataSource[0].name = 'Parent';
    spectator.component.selectRow(spectator.component.dataSource[0]);

    const addChildButton = spectator.query('button.btn-secondary');
    spectator.click(addChildButton);

    expect(spectator.component.dataSource[0].children.length).toBe(1);
    expect(spectator.component.dataSource[0].children[0].name).toBe('');
    expect(spectator.component.dataSource[0].children[0].weight).toBeNull();
  });

  it('should delete a selected row', () => {
    spectator.component.dataSource.push({ name: 'Test', weight: null, symbol: '', children: [] });
    const row = spectator.component.dataSource[1];
    spectator.component.selectRow(row);

    const deleteButton = spectator.query('button.btn-danger');
    spectator.click(deleteButton);

    expect(spectator.component.dataSource.length).toBe(1);
    expect(spectator.component.dataSource.includes(row)).toBe(false);
  });

  it('should move a row up', () => {
    spectator.component.dataSource.push({ name: 'Test1', weight: null, symbol: '', children: [] });
    spectator.component.dataSource.push({ name: 'Test2', weight: null, symbol: '', children: [] });
    spectator.component.selectRow(spectator.component.dataSource[2]);

    const moveUpButton = spectator.query('button.btn-info:nth-of-type(1)');
    spectator.click(moveUpButton);

    expect(spectator.component.dataSource[1].name).toBe('Test2');
    expect(spectator.component.dataSource[2].name).toBe('Test1');
  });

  it('should move a row down', () => {
    spectator.component.dataSource.push({ name: 'Test1', weight: null, symbol: '', children: [] });
    spectator.component.dataSource.push({ name: 'Test2', weight: null, symbol: '', children: [] });
    spectator.component.selectRow(spectator.component.dataSource[1]);

    const moveDownButton = spectator.query('button.btn-info:nth-of-type(2)');
    spectator.click(moveDownButton);

    expect(spectator.component.dataSource[1].name).toBe('Test2');
    expect(spectator.component.dataSource[2].name).toBe('Test1');
  });

  it('should indent a selected row', () => {
    spectator.component.dataSource.push({ name: 'Test1', weight: null, symbol: '', children: [] });
    spectator.component.dataSource.push({ name: 'Test2', weight: null, symbol: '', children: [] });
    spectator.component.selectRow(spectator.component.dataSource[2]);

    const indentButton = spectator.query('
