Pour générer des tests unitaires avec Jest et Spectator pour le composant Angular que nous avons construit, nous devons nous assurer que Spectator est installé et configuré. Spectator facilite les tests en offrant des API simples pour interagir avec les composants.

Voici un guide détaillé pour ajouter des tests unitaires avec Jest et Spectator :

### 1. Installation des dépendances

Assurez-vous d'avoir les dépendances nécessaires installées. Si vous ne les avez pas encore installées, vous pouvez le faire avec les commandes suivantes :

```bash
npm install @ngneat/spectator jest jest-preset-angular @types/jest --save-dev
```

### 2. Configuration de Jest

Ajoutez ou modifiez le fichier `jest.config.js` à la racine de votre projet Angular :

```js
module.exports = {
  preset: 'jest-preset-angular',
  setupFilesAfterEnv: ['<rootDir>/setup-jest.ts'],
  testPathIgnorePatterns: ['<rootDir>/dist/', '<rootDir>/node_modules/'],
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
      stringifyContentPathRegex: '\\.html$',
    },
  },
  transform: {
    '^.+\\.(ts|js|html)$': 'jest-preset-angular',
  },
  moduleFileExtensions: ['ts', 'html', 'js', 'json'],
};
```

Créez ou modifiez le fichier `setup-jest.ts` pour inclure les configurations de Jest :

```ts
import 'jest-preset-angular/setup-jest';
```

### 3. Création des tests unitaires avec Spectator

Créez un fichier de test pour votre composant, par exemple `app.component.spec.ts`, et ajoutez le contenu suivant :

```ts
import { createComponentFactory, Spectator } from '@ngneat/spectator/jest';
import { AppComponent } from './app.component';
import { FormsModule } from '@angular/forms';
import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';

describe('AppComponent', () => {
  let spectator: Spectator<AppComponent>;
  const createComponent = createComponentFactory({
    component: AppComponent,
    imports: [FormsModule],
    schemas: [CUSTOM_ELEMENTS_SCHEMA],
  });

  beforeEach(() => {
    spectator = createComponent();
  });

  it('should create the component', () => {
    expect(spectator.component).toBeTruthy();
  });

  it('should focus on the name input when a new row is added', () => {
    const addButton = spectator.query('button.btn-primary');
    spectator.click(addButton);

    const nameInput = spectator.query<HTMLInputElement>('input[type="text"]');
    expect(document.activeElement).toBe(nameInput);
  });

  it('should add a new row at the end when no row is selected', () => {
    const initialLength = spectator.component.dataSource.length;
    const addButton = spectator.query('button.btn-primary');
    spectator.click(addButton);

    expect(spectator.component.dataSource.length).toBe(initialLength + 1);
    expect(spectator.component.dataSource[initialLength].name).toBe('');
  });

  it('should select the new row added', () => {
    const addButton = spectator.query('button.btn-primary');
    spectator.click(addButton);

    const newRow = spectator.component.dataSource[spectator.component.dataSource.length - 1];
    expect(newRow.isSelected).toBe(true);
    expect(spectator.component.selectedNode).toBe(newRow);
  });

  it('should add a child to the selected row', () => {
    spectator.component.dataSource[0].name = 'Parent';
    spectator.component.selectRow(spectator.component.dataSource[0]);

    const addChildButton = spectator.query('button.btn-secondary');
    spectator.click(addChildButton);

    expect(spectator.component.dataSource[0].children?.length).toBe(1);
    expect(spectator.component.dataSource[0].children![0].name).toBe('');
    expect(spectator.component.dataSource[0].children![0].weight).toBeNull();
  });

  it('should delete a selected row', () => {
    spectator.component.dataSource.push({ name: 'Test', weight: null, symbol: '', children: [] });
    const row = spectator.component.dataSource[1];
    spectator.component.selectRow(row);

    const deleteButton = spectator.query('button.btn-danger');
    spectator.click(deleteButton);

    expect(spectator.component.dataSource.length).toBe(1);
    expect(spectator.component.dataSource.includes(row)).toBe(false);
  });

  it('should move a row up', () => {
    spectator.component.dataSource.push({ name: 'Test1', weight: null, symbol: '', children: [] });
    spectator.component.dataSource.push({ name: 'Test2', weight: null, symbol: '', children: [] });
    spectator.component.selectRow(spectator.component.dataSource[2]);

    const moveUpButton = spectator.query('button.btn-info:nth-of-type(1)');
    spectator.click(moveUpButton);

    expect(spectator.component.dataSource[1].name).toBe('Test2');
    expect(spectator.component.dataSource[2].name).toBe('Test1');
  });

  it('should move a row down', () => {
    spectator.component.dataSource.push({ name: 'Test1', weight: null, symbol: '', children: [] });
    spectator.component.dataSource.push({ name: 'Test2', weight: null, symbol: '', children: [] });
    spectator.component.selectRow(spectator.component.dataSource[1]);

    const moveDownButton = spectator.query('button.btn-info:nth-of-type(2)');
    spectator.click(moveDownButton);

    expect(spectator.component.dataSource[1].name).toBe('Test2');
    expect(spectator.component.dataSource[2].name).toBe('Test1');
  });

  it('should indent a selected row', () => {
    spectator.component.dataSource.push({ name: 'Test1', weight: null, symbol: '', children: [] });
    spectator.component.dataSource.push({ name: 'Test2', weight: null, symbol: '', children: [] });
    spectator.component.selectRow(spectator.component.dataSource[2]);

    const indentButton = spectator.query('button.btn-warning:nth-of-type(1)');
    spectator.click(indentButton);

    expect(spectator.component.dataSource[1].children?.length).toBe(1);
    expect(spectator.component.dataSource[1].children![0].name).toBe('Test2');
  });

  it('should outdent a selected row', () => {
    spectator.component.dataSource.push({ name: 'Test1', weight: null, symbol: '', children: [{ name: 'Test2', weight: null, symbol: '', children: [] }] });
    const child = spectator.component.dataSource[1].children![0];
    spectator.component.selectRow(child);

    const outdentButton = spectator.query('button.btn-warning:nth-of-type(2)');
    spectator.click(outdentButton);

    expect(spectator.component.dataSource.length).toBe(3);
    expect(spectator.component.dataSource[2].name).toBe('Test2');
  });
});
```

### Explications des tests

- **Test de création du composant:** Vérifie que le composant est créé correctement.
- **Focus sur le champ "name" lorsque une nouvelle ligne est ajoutée:** Vérifie que le focus est mis sur le champ "name" après l'ajout d'une nouvelle ligne.
- **Ajout d'une nouvelle ligne à la fin lorsque aucune ligne n'est sélectionnée:** Vérifie que la nouvelle ligne est ajoutée à la fin si aucune ligne n'est sélectionnée.
- **Sélection de la nouvelle ligne ajoutée:** Vérifie que la nouvelle ligne est automatiquement sélectionnée.
- **Ajout d'un enfant à la ligne sélectionnée:** Vérifie que l'enfant est ajouté à la ligne sélectionnée.
- **Suppression de la ligne sélectionnée:** Vérifie que la ligne sélectionnée est supprimée.
- **Déplacement d'une ligne vers le haut:** Vérifie que la ligne sélectionnée est déplacée vers le haut.
- **Déplacement d'une ligne vers le bas:** Vérifie que la ligne sélectionnée est déplacée vers le bas.
- **Indentation d'une ligne sélectionnée:** Vérifie que la ligne sélectionnée est indéxée.
- **Outdentation d'une ligne sélectionnée:** Vérifie que la ligne sélectionnée est désindéxée.

Ces tests couvrent les principales fonctionnalités de votre composant. Vous pouvez les exécuter en utilisant la commande `npm test`.
