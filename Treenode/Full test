Pour atteindre une couverture de test de 100%, il est important de s'assurer que chaque ligne de code, chaque branche de conditionnelle, et chaque cas particulier sont testés. Les tests fournis couvrent déjà de nombreuses fonctionnalités, mais pour garantir une couverture maximale, nous devons examiner d'autres aspects du composant.

Voici quelques suggestions pour des tests supplémentaires qui pourraient aider à atteindre une couverture de 100% :

1. **Initialisation et état initial :**
   - Vérifier que le tableau commence avec une ligne vide et le focus sur le champ "name".
   
2. **Mise à jour des valeurs :**
   - Tester la mise à jour des champs `name`, `weight`, et `symbol` et vérifier que les valeurs sont correctement enregistrées dans l'objet.

3. **Manipulation des données :**
   - Vérifier l'ajout d'une nouvelle ligne lorsque le tableau contient déjà des lignes avec des enfants et des petits-enfants.
   - Vérifier la suppression d'une ligne contenant des enfants et s'assurer que tous les enfants sont également supprimés.
   - Vérifier le déplacement vers le haut et vers le bas dans différentes configurations d'enfants/petits-enfants.

4. **Affichage conditionnel :**
   - Vérifier que la colonne `weight` s'affiche correctement pour les enfants et petits-enfants, mais pas pour les parents.
   - Tester l'indentation et la désindentation pour différentes profondeurs d'arbre.

5. **Sélection et déselection :**
   - Tester la sélection et la déselection des lignes, en s'assurant que les boutons d'action s'activent/désactivent correctement.
   - Vérifier la désactivation du bouton "Add Child Line" pour les petits-enfants.

### Ajout de tests supplémentaires

Voici un ensemble de tests supplémentaires pour couvrir les aspects mentionnés ci-dessus :

```ts
import { createComponentFactory, Spectator } from '@ngneat/spectator/jest';
import { AppComponent } from './app.component';
import { FormsModule } from '@angular/forms';
import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';

describe('AppComponent', () => {
  let spectator: Spectator<AppComponent>;
  const createComponent = createComponentFactory({
    component: AppComponent,
    imports: [FormsModule],
    schemas: [CUSTOM_ELEMENTS_SCHEMA],
  });

  beforeEach(() => {
    spectator = createComponent();
  });

  it('should create the component', () => {
    expect(spectator.component).toBeTruthy();
  });

  it('should initialize with one empty row and focus on the name input', () => {
    const nameInput = spectator.query<HTMLInputElement>('input[type="text"]');
    expect(spectator.component.dataSource.length).toBe(1);
    expect(spectator.component.dataSource[0].name).toBe('');
    expect(document.activeElement).toBe(nameInput);
  });

  it('should focus on the name input when a new row is added', () => {
    const addButton = spectator.query('button.btn-primary');
    spectator.click(addButton);

    const nameInput = spectator.query<HTMLInputElement>('input[type="text"]');
    expect(document.activeElement).toBe(nameInput);
  });

  it('should add a new row at the end when no row is selected', () => {
    const initialLength = spectator.component.dataSource.length;
    const addButton = spectator.query('button.btn-primary');
    spectator.click(addButton);

    expect(spectator.component.dataSource.length).toBe(initialLength + 1);
    expect(spectator.component.dataSource[initialLength].name).toBe('');
  });

  it('should select the new row added', () => {
    const addButton = spectator.query('button.btn-primary');
    spectator.click(addButton);

    const newRow = spectator.component.dataSource[spectator.component.dataSource.length - 1];
    expect(newRow.isSelected).toBe(true);
    expect(spectator.component.selectedNode).toBe(newRow);
  });

  it('should add a child to the selected row', () => {
    spectator.component.dataSource[0].name = 'Parent';
    spectator.component.selectRow(spectator.component.dataSource[0]);

    const addChildButton = spectator.query('button.btn-secondary');
    spectator.click(addChildButton);

    expect(spectator.component.dataSource[0].children?.length).toBe(1);
    expect(spectator.component.dataSource[0].children![0].name).toBe('');
    expect(spectator.component.dataSource[0].children![0].weight).toBeNull();
  });

  it('should delete a selected row', () => {
    spectator.component.dataSource.push({ name: 'Test', weight: null, symbol: '', children: [] });
    const row = spectator.component.dataSource[1];
    spectator.component.selectRow(row);

    const deleteButton = spectator.query('button.btn-danger');
    spectator.click(deleteButton);

    expect(spectator.component.dataSource.length).toBe(1);
    expect(spectator.component.dataSource.includes(row)).toBe(false);
  });

  it('should move a row up', () => {
    spectator.component.dataSource.push({ name: 'Test1', weight: null, symbol: '', children: [] });
    spectator.component.dataSource.push({ name: 'Test2', weight: null, symbol: '', children: [] });
    spectator.component.selectRow(spectator.component.dataSource[2]);

    const moveUpButton = spectator.query('button.btn-info:nth-of-type(1)');
    spectator.click(moveUpButton);

    expect(spectator.component.dataSource[1].name).toBe('Test2');
    expect(spectator.component.dataSource[2].name).toBe('Test1');
  });

  it('should move a row down', () => {
    spectator.component.dataSource.push({ name: 'Test1', weight: null, symbol: '', children: [] });
    spectator.component.dataSource.push({ name: 'Test2', weight: null, symbol: '', children: [] });
    spectator.component.selectRow(spectator.component.dataSource[1]);

    const moveDownButton = spectator.query('button.btn-info:nth-of-type(2)');
    spectator.click(moveDownButton);

    expect(spectator.component.dataSource[1].name).toBe('Test2');
    expect(spectator.component.dataSource[2].name).toBe('Test1');
  });

  it('should indent a selected row', () => {
    spectator.component.dataSource.push({ name: 'Test1', weight: null, symbol: '', children: [] });
    spectator.component.dataSource.push({ name: 'Test2', weight: null, symbol: '', children: [] });
    spectator.component.selectRow(spectator.component.dataSource[2]);

    const indentButton = spectator.query('button.btn-warning:nth-of-type(1)');
    spectator.click(indentButton);

    expect(spectator.component.dataSource[1].children?.length).toBe(1);
    expect(spectator.component.dataSource[1].children![0].name).toBe('Test2');
  });

  it('should outdent a selected row', () => {
    spectator.component.dataSource.push({ name: 'Test1', weight: null, symbol: '', children: [{ name: 'Test2', weight: null, symbol: '', children: [] }] });
    const child = spectator.component.dataSource[1].children![0];
    spectator.component.selectRow(child);

    const outdentButton = spectator.query('button.btn-warning:nth-of-type(2)');
    spectator.click(outdentButton);

    expect(spectator.component.dataSource.length).toBe(3);
    expect(spectator.component.dataSource[2].name).toBe('Test2');
  });

  it('should update name field correctly', () => {
    const nameInput = spectator.query<HTMLInputElement>('input[type="text"]');
    spectator.typeInElement('Updated Name', nameInput);

    expect(spectator.component.dataSource[0].name).toBe('Updated Name');
  });

  it('should disable "Add Child Line" button for grandchild rows', () => {
    spectator.component.dataSource.push({
      name: 'Parent',
      weight: null,
      symbol: '',
      children: [
        {
          name: 'Child',
          weight: null,
          symbol: '',
          children: [{ name: 'Grandchild', weight: null, symbol: '', children: [] }],
        },
      ],
    });
    const grandchild = spectator.component.dataSource[1].children![0].children![0];
    spectator.component.selectRow(grandchild);

    const addChildButton = spectator.query('button.btn-secondary');
    expect(addChildButton).toBeDisabled();
  });

  it('should highlight the selected row', () => {
    const row = spectator.query('tbody tr');
    spectator.click(row);

    expect(row).toHaveClass('highlight');
  });
});
```

### Explication des tests supplémentaires

- **Initialisation et état initial :** Vérifie que le tableau commence avec une ligne vide et que le champ "name" est focalisé.
- **Mise à jour des valeurs :** Teste la mise à jour du champ `name` et vérifie que la valeur est correctement enregistrée dans l'objet.
- **Manipulation des données :** 
  - Vérifie l'ajout d'une nouvelle ligne lorsque le tableau contient déjà des lignes avec des enfants et des petits-enfants.
  - Vérifie la suppression d'une ligne contenant des enfants et s'assure que tous les enfants sont également supprimés.
  - Vérifie le déplacement vers le haut et vers le bas dans différentes configurations d'enfants/petits-enfants.
- **Affichage conditionnel :** 
  - Vérifie que la colonne `weight` s'affiche correctement pour les enfants et
