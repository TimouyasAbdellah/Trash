Voici le code complet, incluant la méthode groupReportsByQuarterAndMonth ainsi que les tests unitaires dans un seul fichier pour plus de clarté. Cela comprend la définition des classes nécessaires (LightBorrowingBaseReport, BorrowingBaseReportQuarter, et MonthlyBorrowingBaseReport), la méthode de regroupement et les tests unitaires.

Code Complet

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertEquals;

// Classe de base représentant un rapport léger
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
class LightBorrowingBaseReport {
    private String id;
    private LocalDate valueDate;
    private boolean extraReportOutsideOfSchedule;
}

// Classe pour représenter un mois dans un trimestre avec ses rapports
@Data
@AllArgsConstructor
class MonthlyBorrowingBaseReport {
    private int month;
    private List<LightBorrowingBaseReport> reports;
}

// Classe pour représenter un trimestre avec ses rapports mensuels
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
class BorrowingBaseReportQuarter {
    private String quarterName;
    private List<MonthlyBorrowingBaseReport> borrowingBaseReportMonthlies;
}

// Service pour regrouper les rapports par trimestre et par mois
class LightBorrowingBaseReportService {

    public static List<BorrowingBaseReportQuarter> groupReportsByQuarterAndMonth(List<LightBorrowingBaseReport> reports) {
        // Map pour stocker les rapports groupés par trimestre et par mois
        Map<Integer, Map<Integer, List<LightBorrowingBaseReport>>> groupedReports = new HashMap<>();

        // Grouper les rapports par trimestre et par mois
        for (LightBorrowingBaseReport report : reports) {
            LocalDate date = report.getValueDate();
            int quarter = (date.getMonthValue() - 1) / 3 + 1;
            int month = date.getMonthValue();

            groupedReports
                .computeIfAbsent(quarter, q -> new HashMap<>())
                .computeIfAbsent(month, m -> new ArrayList<>())
                .add(report);
        }

        // Convertir la Map en une liste de BorrowingBaseReportQuarter
        List<BorrowingBaseReportQuarter> borrowingBaseReportQuarters = new ArrayList<>();
        groupedReports.forEach((quarter, months) -> {
            String quarterName = "Q" + quarter;

            // Liste pour stocker les rapports mensuels du trimestre
            List<MonthlyBorrowingBaseReport> borrowingBaseReportMonthlies = months.entrySet().stream()
                .map(entry -> new MonthlyBorrowingBaseReport(entry.getKey(), entry.getValue()))
                .collect(Collectors.toList());

            // Ajouter un nouveau BorrowingBaseReportQuarter avec le nom du trimestre et les rapports mensuels
            borrowingBaseReportQuarters.add(
                BorrowingBaseReportQuarter.builder()
                    .quarterName(quarterName)
                    .borrowingBaseReportMonthlies(borrowingBaseReportMonthlies)
                    .build()
            );
        });

        return borrowingBaseReportQuarters;
    }
}

// Classe de test pour vérifier le comportement de la méthode de regroupement
public class LightBorrowingBaseReportServiceTest {

    @Test
    public void testGroupReportsByQuarterAndMonth_singleReport() {
        // Préparation des données de test : un seul rapport
        LightBorrowingBaseReport report = LightBorrowingBaseReport.builder()
            .id("1")
            .valueDate(LocalDate.of(2024, 2, 15)) // Février, donc Q1
            .extraReportOutsideOfSchedule(false)
            .build();
        
        List<LightBorrowingBaseReport> reports = List.of(report);

        // Appel de la méthode de regroupement
        List<BorrowingBaseReportQuarter> result = LightBorrowingBaseReportService.groupReportsByQuarterAndMonth(reports);

        // Vérification : un trimestre, un mois
        assertEquals(1, result.size(), "Il devrait y avoir un trimestre.");
        assertEquals("Q1", result.get(0).getQuarterName(), "Le trimestre devrait être Q1.");
        assertEquals(1, result.get(0).getBorrowingBaseReportMonthlies().size(), "Il devrait y avoir un mois dans le trimestre.");
        assertEquals(2, result.get(0).getBorrowingBaseReportMonthlies().get(0).getMonth(), "Le mois devrait être Février.");
        assertEquals(1, result.get(0).getBorrowingBaseReportMonthlies().get(0).getReports().size(), "Il devrait y avoir un seul rapport pour le mois.");
    }

    @Test
    public void testGroupReportsByQuarterAndMonth_multipleReportsDifferentQuarters() {
        // Préparation des données de test : plusieurs rapports dans différents trimestres
        LightBorrowingBaseReport report1 = LightBorrowingBaseReport.builder()
            .id("1")
            .valueDate(LocalDate.of(2024, 2, 15)) // Q1
            .extraReportOutsideOfSchedule(false)
            .build();

        LightBorrowingBaseReport report2 = LightBorrowingBaseReport.builder()
            .id("2")
            .valueDate(LocalDate.of(2024, 5, 10)) // Q2
            .extraReportOutsideOfSchedule(false)
            .build();

        LightBorrowingBaseReport report3 = LightBorrowingBaseReport.builder()
            .id("3")
            .valueDate(LocalDate.of(2024, 8, 25)) // Q3
            .extraReportOutsideOfSchedule(false)
            .build();

        List<LightBorrowingBaseReport> reports = List.of(report1, report2, report3);

        // Appel de la méthode de regroupement
        List<BorrowingBaseReportQuarter> result = LightBorrowingBaseReportService.groupReportsByQuarterAndMonth(reports);

        // Vérification : trois trimestres, un mois chacun
        assertEquals(3, result.size(), "Il devrait y avoir trois trimestres.");
        
        // Vérifier le trimestre Q1
        assertEquals("Q1", result.get(0).getQuarterName());
        assertEquals(1, result.get(0).getBorrowingBaseReportMonthlies().size());
        assertEquals(2, result.get(0).getBorrowingBaseReportMonthlies().get(0).getMonth());

        // Vérifier le trimestre Q2
        assertEquals("Q2", result.get(1).getQuarterName());
        assertEquals(1, result.get(1).getBorrowingBaseReportMonthlies().size());
        assertEquals(5, result.get(1).getBorrowingBaseReportMonthlies().get(0).getMonth());

        // Vérifier le trimestre Q3
        assertEquals("Q3", result.get(2).getQuarterName());
        assertEquals(1, result.get(2).getBorrowingBaseReportMonthlies().size());
        assertEquals(8, result.get(2).getBorrowingBaseReportMonthlies().get(0).getMonth());
    }

    @Test
    public void testGroupReportsByQuarterAndMonth_multipleReportsSameQuarterDifferentMonths() {
        // Préparation des données de test : plusieurs rapports dans le même trimestre mais différents mois
        LightBorrowingBaseReport report1 = LightBorrowingBaseReport.builder()
            .id("1")
            .valueDate(LocalDate.of(2024, 1, 10)) // Janvier, Q1
            .extraReportOutsideOfSchedule(false)
            .build();

        LightBorrowingBaseReport report2 = LightBorrowingBaseReport.builder()
            .id("2")
            .valueDate(LocalDate.of(2024, 2, 5)) // Février, Q1
            .extraReportOutsideOfSchedule(false)
            .build();

        LightBorrowingBaseReport report3 = LightBorrowingBaseReport.builder()
            .id("3")
            .valueDate(LocalDate.of(2024, 3, 20)) // Mars, Q1
            .extraReportOutsideOfSchedule(false)
            .build();

        List<LightBorrowingBaseReport> reports = List.of(report1, report2, report3);

        // Appel de la méthode de regroupement
        List<BorrowingBaseReportQuarter> result = LightBorrowingBaseReportService.groupReportsByQuarterAndMonth(reports);

        // Vérification : un trimestre avec trois mois différents
        assertEquals(1, result.size(), "Il devrait y avoir un trimestre.");
        assertEquals("Q1", result.get(0).getQuarterName(), "Le trimestre devrait être Q1.");
        assertEquals(3, result.get(0).getBorrowingBaseReportMonthlies().size(), "Il devrait y avoir trois mois dans le trimestre.");

        // Vérifier chaque mois dans Q1
        assertEquals(1, result.get(0).getBorrowingBaseReportMonthlies().get(0).getMonth());
        assertEquals(2, result.get(0).getBorrowingBaseReportMonthlies().get(1).getMonth());
        assertEquals(3, result.get(0).getBorrowingBaseReportMonthlies().get(2).getMonth());
    }
}

Explication

Ce fichier regroupe :

Les définitions des classes LightBorrowingBaseReport, MonthlyBorrowingBaseReport, et BorrowingBaseReportQuarter.

La méthode groupReportsByQuarterAndMonth pour regrouper les rapports.

Les tests


