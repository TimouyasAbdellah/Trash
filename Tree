Hereâ€™s the summary with examples in English for each solution where the data object contains asset, rate, and amount.

1. Adjacency List

Structure: Each node has a parent_id to reference its parent in the tree.

Table: tree

Example:

INSERT INTO tree (id, parent_id, asset, rate, amount) VALUES 
(1, NULL, 'Root Asset', 5.0, 100),
(2, 1, 'Asset 1', 3.0, 50),
(3, 1, 'Asset 2', 2.5, 75),
(4, 2, 'Sub Asset 1', 1.5, 25);

2. Nested Set

Structure: Each node has left and right bounds indicating its position in the tree.

Table: tree

Example:

INSERT INTO tree (id, asset, rate, amount, left, right) VALUES 
(1, 'Root Asset', 5.0, 100, 1, 8),
(2, 'Asset 1', 3.0, 50, 2, 5),
(3, 'Sub Asset 1', 1.5, 25, 3, 4),
(4, 'Asset 2', 2.5, 75, 6, 7);

3. Materialized Path

Structure: Each node contains a path field representing the full path to the node.

Table: tree

Example:

INSERT INTO tree (id, asset, rate, amount, path) VALUES 
(1, 'Root Asset', 5.0, 100, '1'),
(2, 'Asset 1', 3.0, 50, '1/2'),
(3, 'Sub Asset 1', 1.5, 25, '1/2/3'),
(4, 'Asset 2', 2.5, 75, '1/4');

4. JSON in an SQL Column

Structure: The entire tree structure is stored in a single column as a JSON document.

Table: tree

Example:

INSERT INTO tree (id, asset_data) VALUES 
(1, '{
  "id": 1,
  "asset": "Root Asset",
  "rate": 5.0,
  "amount": 100,
  "children": [
    {
      "id": 2,
      "asset": "Asset 1",
      "rate": 3.0,
      "amount": 50,
      "children": [
        {
          "id": 3,
          "asset": "Sub Asset 1",
          "rate": 1.5,
          "amount": 25
        }
      ]
    },
    {
      "id": 4,
      "asset": "Asset 2",
      "rate": 2.5,
      "amount": 75
    }
  ]
}');


---

Summary Comparison with Examples:

Each solution has trade-offs depending on your needs for updates, queries, and tree depth.

