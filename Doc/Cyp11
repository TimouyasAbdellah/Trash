To generate a Mocha report after all Cypress tests have run in parallel, you can use a combination of Mocha reporter and merging the results from each parallel job into a single report. Here's how to set it up in your CI pipeline (e.g., GitHub Actions) when running tests in parallel without the Cypress Dashboard.

Steps for Generating a Mocha Report After Parallel Cypress Tests:

1. Install mochawesome Reporter

First, install the mochawesome reporter and its merge utility in your project:

npm install mochawesome mochawesome-merge --save-dev

2. Configure Cypress to Use mochawesome

In your Cypress configuration (cypress.config.js or cypress.json), set the reporter to mochawesome:

// cypress.config.js
const { defineConfig } = require('cypress')

module.exports = defineConfig({
  reporter: 'mochawesome',
  reporterOptions: {
    reportDir: 'cypress/results', // Directory where reports will be saved
    overwrite: false,
    html: false,
    json: true,  // Save reports in JSON format for merging later
  },
})

This setup ensures that Cypress will generate a mochawesome JSON report for each parallel job.

3. Run Cypress Tests in Parallel (GitHub Actions)

Modify your GitHub Actions workflow to include the parallelized spec files and store the report files for each job.

name: Cypress Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  cypress:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        spec-set: [
          "cypress/integration/spec1.cy.js",
          "cypress/integration/spec2.cy.js",
          "cypress/integration/spec3.cy.js",
          "cypress/integration/spec4.cy.js"
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run Cypress tests with mochawesome
        run: npx cypress run --spec ${{ matrix.spec-set }}

      - name: Upload Mocha report (JSON)
        uses: actions/upload-artifact@v2
        with:
          name: mochawesome-report-${{ matrix.spec-set }}  # Name for each artifact
          path: cypress/results/*.json  # Path to the mochawesome JSON report

4. Merge the Mocha Reports in a New Job

Once all the parallel jobs are finished, a final step is required to merge the individual Mocha reports into one combined report. You can create a separate job in GitHub Actions to handle this.

merge-reports:
    runs-on: ubuntu-latest
    needs: cypress  # This ensures the merge-reports job waits for all Cypress jobs to finish
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download reports
        uses: actions/download-artifact@v2
        with:
          name: mochawesome-report-*

      - name: Merge Mocha reports
        run: npx mochawesome-merge cypress/results/*.json > cypress/results/merged-report.json

      - name: Generate HTML report
        run: npx marge cypress/results/merged-report.json --reportDir cypress/results --inline

Explanation:

upload-artifact: Uploads the individual mochawesome JSON reports from each parallel job as artifacts.

download-artifact: In the merge-reports job, this step downloads all the reports generated by the previous parallel Cypress jobs.

mochawesome-merge: Merges all the JSON reports into a single report.

marge: Converts the merged JSON report into a single, readable HTML report.


5. View the Final Mocha Report

After the pipeline completes, youâ€™ll have a single, merged mochawesome report (HTML and JSON) that contains the results of all your parallel tests. This report will be saved in the cypress/results directory, and you can download it from the CI platform for review.

Final GitHub Actions Workflow Example:

name: Cypress Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  cypress:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        spec-set: [
          "cypress/integration/spec1.cy.js",
          "cypress/integration/spec2.cy.js",
          "cypress/integration/spec3.cy.js",
          "cypress/integration/spec4.cy.js"
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run Cypress tests with mochawesome
        run: npx cypress run --spec ${{ matrix.spec-set }}

      - name: Upload Mocha report (JSON)
        uses: actions/upload-artifact@v2
        with:
          name: mochawesome-report-${{ matrix.spec-set }}
          path: cypress/results/*.json

  merge-reports:
    runs-on: ubuntu-latest
    needs: cypress
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download reports
        uses: actions/download-artifact@v2
        with:
          name: mochawesome-report-*

      - name: Merge Mocha reports
        run: npx mochawesome-merge cypress/results/*.json > cypress/results/merged-report.json

      - name: Generate HTML report
        run: npx marge cypress/results/merged-report.json --reportDir cypress/results --inline

Conclusion:

This setup enables you to run Cypress tests in parallel and generate a final Mocha report without using the Cypress Dashboard. By leveraging mochawesome for reporting and mochawesome-merge for merging test results, you can efficiently handle parallel test execution and generate a comprehensive report at the end.

