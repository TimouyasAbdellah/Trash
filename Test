Pour créer un tableau avec une structure en arbre comportant trois niveaux en utilisant Angular et Bootstrap 5, nous devons adapter le code pour gérer plusieurs niveaux de profondeur. Voici comment vous pouvez le faire :

### 1. Installer Angular et Bootstrap

Si ce n'est pas déjà fait, assurez-vous d'avoir Angular et Bootstrap installés dans votre projet. Vous pouvez ajouter Bootstrap à votre projet Angular en utilisant la commande suivante :

```bash
ng add ngx-bootstrap
```

Et assurez-vous d'ajouter Bootstrap 5 à votre projet en modifiant votre `angular.json` pour inclure les fichiers CSS de Bootstrap :

```json
"styles": [
  "node_modules/bootstrap/dist/css/bootstrap.min.css",
  "src/styles.css"
]
```

### 2. Créer un composant pour le tableau avec un arbre

Créez un nouveau composant pour votre tree table :

```bash
ng generate component tree-table
```

### 3. HTML pour le Tree Table

Voici un exemple de code HTML pour le `TreeTableComponent` (`tree-table.component.html`):

```html
<table class="table table-bordered">
  <thead>
    <tr>
      <th>Position</th>
      <th>Name</th>
      <th>Weight</th>
      <th>Symbol</th>
    </tr>
  </thead>
  <tbody>
    <ng-container *ngFor="let element of dataSource">
      <tr>
        <td>{{element.position}}</td>
        <td>{{element.name}}</td>
        <td>{{element.weight}}</td>
        <td>{{element.symbol}}</td>
      </tr>
      <ng-container *ngIf="element.children">
        <ng-container *ngFor="let child of element.children">
          <tr>
            <td></td>
            <td>{{child.name}}</td>
            <td>{{child.weight}}</td>
            <td>{{child.symbol}}</td>
          </tr>
          <ng-container *ngIf="child.children">
            <ng-container *ngFor="let grandChild of child.children">
              <tr>
                <td></td>
                <td></td>
                <td>{{grandChild.name}}</td>
                <td>{{grandChild.weight}}</td>
                <td>{{grandChild.symbol}}</td>
              </tr>
            </ng-container>
          </ng-container>
        </ng-container>
      </ng-container>
    </ng-container>
  </tbody>
</table>
```

### 4. TypeScript pour le Tree Table

Voici un exemple de code TypeScript pour le `TreeTableComponent` (`tree-table.component.ts`):

```typescript
import { Component } from '@angular/core';

interface PeriodicElement {
  name: string;
  position: number;
  weight: number;
  symbol: string;
  children?: PeriodicElement[];
}

const ELEMENT_DATA: PeriodicElement[] = [
  {
    position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H', children: [
      {
        position: 11, name: 'Hydrogen-1', weight: 1.0078, symbol: 'H1', children: [
          { position: 111, name: 'Hydrogen-1a', weight: 1.0077, symbol: 'H1a' },
          { position: 112, name: 'Hydrogen-1b', weight: 1.0076, symbol: 'H1b' }
        ]
      },
      {
        position: 12, name: 'Hydrogen-2', weight: 2.0141, symbol: 'H2', children: [
          { position: 121, name: 'Hydrogen-2a', weight: 2.0140, symbol: 'H2a' }
        ]
      }
    ]
  },
  { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },
  {
    position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li', children: [
      {
        position: 13, name: 'Lithium-1', weight: 6.015, symbol: 'Li1', children: [
          { position: 131, name: 'Lithium-1a', weight: 6.0149, symbol: 'Li1a' }
        ]
      },
      {
        position: 14, name: 'Lithium-2', weight: 7.016, symbol: 'Li2', children: [
          { position: 141, name: 'Lithium-2a', weight: 7.0159, symbol: 'Li2a' },
          { position: 142, name: 'Lithium-2b', weight: 7.0158, symbol: 'Li2b' }
        ]
      }
    ]
  }
];

@Component({
  selector: 'app-tree-table',
  templateUrl: './tree-table.component.html',
  styleUrls: ['./tree-table.component.css']
})
export class TreeTableComponent {
  dataSource = ELEMENT_DATA;
}
```

### 5. CSS pour le Tree Table (Optionnel)

Ajoutez un fichier CSS pour styliser le tableau et l'arbre si nécessaire (`tree-table.component.css`):

```css
.table-bordered {
  width: 100%;
  border-collapse: collapse;
}

.table-bordered th, .table-bordered td {
  border: 1px solid #dee2e6;
  padding: 8px;
}

.table-bordered thead th {
  background-color: #f8f9fa;
}

.table-bordered tbody tr td:nth-child(2) {
  padding-left: 20px;
}

.table-bordered tbody tr td:nth-child(3) {
  padding-left: 40px;
}
```

### 6. Utiliser le composant dans votre application

Ajoutez le `TreeTableComponent` dans votre template principal (par exemple, `app.component.html`):

```html
<app-tree-table></app-tree-table>
```

### Explication

1. **Structure des données** : La structure des données `ELEMENT_DATA` inclut des éléments avec des enfants, créant une structure en arbre à trois niveaux.
2. **Rendu du tableau** : Utilisation d'Angular `*ngFor` pour itérer sur les éléments et afficher les enfants et petits-enfants si présents.
3. **Bootstrap Table** : Utilisation des classes Bootstrap pour styliser le tableau.
4. **Indentation** : Utilisation du CSS pour indenter les niveaux de l'arbre.

En suivant ces étapes, vous pouvez créer un tableau avec une structure en arbre comportant trois niveaux en utilisant uniquement Angular et Bootstrap 5. Vous pouvez adapter ce code pour répondre à vos besoins spécifiques en matière de structure de données et de style.
